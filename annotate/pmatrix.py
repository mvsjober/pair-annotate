import numpy as np
import itertools

class PMatrix:
    """P matrix - s*s matrix used for generating annotation pairs.
    
    Each element is an integer, which is the database id of the shot.
    Pairs are generated by enumerating all pairs of items for each
    row, and each column separately.

    """
    
    def __init__(self, s):
        self.s = s
        self.p = None

    def _convert_to_numpy(self, x, check_uniqueness=False):
        if not isinstance(x, np.ndarray):
            x = np.array(x)

        if check_uniqueness:
            assert(len(x) == len(np.unique(x)))
        return x        

    def init_randomly(self, ids):
        s = self.s

        ids = self._convert_to_numpy(ids, True)
        assert(ids.shape == (s*s,))

        np.random.shuffle(ids)
        self.p = ids.reshape((s,s))

    def init_spiral(self, p, ids):
        s = self.s

        p = self._convert_to_numpy(p)
        assert(p.shape == (s*s,))

        ids = self._convert_to_numpy(ids, True)
        assert(ids.shape == (s*s,))

        width = s
        height = s

        first_row = 0
        first_column = 0

        last_column = s-1
        last_row = s-1

        ps = p.argsort()
        i = 0

        self.p = np.zeros((s, s), dtype=ids.dtype)

        while True:
            # first row, left to right
            self.p[first_row, first_column:last_column+1] = ids[ps[i:i+width]]

            i += width
            height -= 1
            first_row += 1
            if i >= len(ids): break

            # last column, top to bottom
            self.p[first_row:last_row+1, last_column] = ids[ps[i:i+height]]

            i += height
            width -= 1
            last_column -= 1

            # last row, right to left
            self.p[last_row, first_column:last_column+1] = ids[ps[i+width-1:i-1:-1]]

            i += width
            height -= 1
            last_row -= 1
            if i >= len(ids): break

            # first column, bottom to top
            self.p[first_row:last_row+1,first_column] = ids[ps[i+height-1:i-1:-1]]

            i += height
            width += -1
            first_column += 1

    def generate_pairs(self):
        s = self.s

        assert(self.p is not None)
        assert(self.p.shape == (s,s))

        pairs = []
        # for each row
        for r in range(s):
            pairs.extend(itertools.combinations(list(self.p[r,:]), 2))

        # for each column
        for c in range(s):
            pairs.extend(itertools.combinations(list(self.p[:,c]), 2))

        return pairs

    def __str__(self):
        return str(self.p)
